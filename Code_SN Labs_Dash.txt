import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px

# Initialize the Dash app
app = dash.Dash(__name__)

# Assuming spacex_df is your dataset, loading it
# spacex_df = pd.read_csv("spacex_data.csv") # Load your dataset here
# For testing, let's mock a small example dataframe
spacex_data = {
    'Launch Site': ['CCAFS LC-40', 'VAFB SLC-4E', 'KSC LC-39A', 'CCAFS SLC-40', 'CCAFS LC-40'],
    'class': [1, 1, 0, 1, 1],
    'Payload Mass (kg)': [5000, 6000, 3000, 8000, 5000],
    'Booster Version Category': ['F9', 'F9', 'F9 B5', 'F9', 'F9 B5']
}
spacex_df = pd.DataFrame(spacex_data)

# Define the layout of the app
app.layout = html.Div([
    dcc.Dropdown(
        id='site-dropdown',
        options=[
            {'label': 'All Sites', 'value': 'ALL'},
            {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},
            {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},
            {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},
            {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'},
        ],
        value='ALL',
        placeholder="Select a Launch Site here",
        searchable=True
    ),
    
    dcc.Graph(id='success-pie-chart'),
    
    dcc.RangeSlider(
        id='payload-slider',
        min=0, 
        max=10000, 
        step=1000,
        marks={i: str(i) for i in range(0, 10001, 1000)},
        value=[0, 10000]
    ),
    
    dcc.Graph(id='success-payload-scatter-chart')
])

# Callback to update the pie chart
@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'),
    Input(component_id='site-dropdown', component_property='value')
)
def get_pie_chart(entered_site):
    if entered_site == 'ALL':
        # Generate pie chart for all launch sites
        fig = px.pie(
            spacex_df, 
            names='Launch Site', 
            values='class', 
            title='Total Success Launches for All Sites'
        )
        return fig
    else:
        # Filter data for selected site
        filtered_df = spacex_df[spacex_df['Launch Site'] == entered_site]
        site_data = filtered_df['class'].value_counts().reset_index()
        site_data.columns = ['class', 'count']
        
        # Generate pie chart for specific launch site
        fig = px.pie(
            site_data, 
            names='class', 
            values='count', 
            title=f'Total Success vs Failure Launches for {entered_site}'
        )
        return fig

# Callback to update the scatter plot based on site and payload range
@app.callback(
    Output(component_id='success-payload-scatter-chart', component_property='figure'),
    [Input(component_id='site-dropdown', component_property='value'),
     Input(component_id='payload-slider', component_property='value')]
)
def update_scatter_plot(selected_site, payload_range):
    low, high = payload_range
    filtered_df = spacex_df[(spacex_df['Payload Mass (kg)'] >= low) & 
                            (spacex_df['Payload Mass (kg)'] <= high)]
    
    if selected_site == 'ALL':
        # Generate scatter plot for all launch sites
        fig = px.scatter(
            filtered_df, 
            x='Payload Mass (kg)', 
            y='class', 
            color='Booster Version Category',
            title='Correlation between Payload and Success for All Sites'
        )
        return fig
    else:
        # Filter data for the selected site
        filtered_df = filtered_df[filtered_df['Launch Site'] == selected_site]
        
        # Generate scatter plot for selected site
        fig = px.scatter(
            filtered_df, 
            x='Payload Mass (kg)', 
            y='class', 
            color='Booster Version Category',
            title=f'Correlation between Payload and Success for {selected_site}'
        )
        return fig

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)
